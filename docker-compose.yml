#
# 
#
version: '3.8'

services:

#
# copy notebooks and html files in ./notebooks on host
# to /srv/problem_solving_content and create
# a named volume holding that target
#
# content:
#   container_name: book_content
#   build:
#     context: .
#     dockerfile: content.dockerfile
#   image: phaustin/problem_solving_content:sep09b
#   volumes:
#     - type: volume
#       source: problem-solving-notebooks
#       target: /srv/problem_solving_notebooks
#
# run conda build to produce base-notebook-2020.09.05-0.tar.bz2
# for upload to anaconda:
#  docker-compose run -d --name conda conda_build tail -f
#  docker cp conda:/srv/conda_channel built_channel
#
  # conda_build:
  #   container_name: conda_build
  #   build:
  #     context: conda_build
  #     dockerfile: Dockerfile
  #   image: phaustin/conda_build:sep05

#
# start a web server at port .env:TEXT_PORT
# with the html files from book_content
#
  webserver:
    image: httpd:2.4
    container_name: ${WEB_CONTAINER_NAME}
    ports:
      - "${TEXT_PORT}:80"
    volumes:
      - ./notebooks_source:/srv/notebooks
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: bash -c
            "cp -a /srv/notebooks/_build/html/* /usr/local/apache2/htdocs/.
             && httpd-foreground
            "
#
# start a jupyter notebook with the notebooks from book_content on
# .env:NB_PORT
#
# before building be sure to make the conda lock file with
# conda-lock -f environment.yml -p linux-64
#
  notebook:
    build:
      context: notebook_image
    image: phaustin/notebook:sep15
    container_name: ${NOTEBOOK_CONTAINER_NAME}

  jupyterhub:
    build:
      context: hub_image
    image: phaustin/jupyterhub:sep15
    container_name: ${HUB_CONTAINER_NAME}
    depends_on:
      - notebook
    ports:
      - "${NB_PORT}:8000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - textbook_network

# explicitly name the network rather than letting docker_compose assign
# set the network name
# this needs to be matched in jupyterhub_config.py by:
# c.DockerSpawner.network_name = 'textbook_network'
networks:
    textbook_network:
      driver: bridge
      name: ${NETWORK_NAME}
